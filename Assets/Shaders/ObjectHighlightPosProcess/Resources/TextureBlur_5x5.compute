// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

Texture2D<float4> Texture;
RWTexture2D<float4> TextureOut;

[numthreads(16,16,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	int stride = 2;
	int size = 5 * stride;
	float sizeSqr = size * size;

	float4 values;
	for (int x = -size; x < size; x+= stride)
	{
		for (int y = -size; y < size; y+= stride)
		{
			values = values + Texture[id.xy + uint2(x, y)];
		}
	}

	TextureOut[id.xy] = values / sizeSqr;
}

//void CSMain(uint3 id : SV_DispatchThreadID)
//{
//	float4 x1y1 = Texture[id.xy + uint2(-2, -2)];
//	float4 x2y1 = Texture[id.xy + uint2(-1, -2)];
//	float4 x3y1 = Texture[id.xy + uint2(0, -2)];
//	float4 x4y1 = Texture[id.xy + uint2(1, -2)];
//	float4 x5y1 = Texture[id.xy + uint2(2, -2)];
//
//	float4 x1y2 = Texture[id.xy + uint2(-2, -1)];
//	float4 x2y2 = Texture[id.xy + uint2(-1, -1)];
//	float4 x3y2 = Texture[id.xy + uint2(0, -1)];
//	float4 x4y2 = Texture[id.xy + uint2(1, -1)];
//	float4 x5y2 = Texture[id.xy + uint2(2, -1)];
//
//	float4 x1y3 = Texture[id.xy + uint2(-2, -0)];
//	float4 x2y3 = Texture[id.xy + uint2(-1, -0)];
//	float4 x3y3 = Texture[id.xy + uint2(0, -0)]; // centre
//	float4 x4y3 = Texture[id.xy + uint2(1, -0)];
//	float4 x5y3 = Texture[id.xy + uint2(2, -0)];
//
//	float4 x1y4 = Texture[id.xy + uint2(-2, 1)];
//	float4 x2y4 = Texture[id.xy + uint2(-1, 1)];
//	float4 x3y4 = Texture[id.xy + uint2(0, 1)];
//	float4 x4y4 = Texture[id.xy + uint2(1, 1)];
//	float4 x5y4 = Texture[id.xy + uint2(2, 1)];
//
//	float4 x1y5 = Texture[id.xy + uint2(-2, 2)];
//	float4 x2y5 = Texture[id.xy + uint2(-1, 2)];
//	float4 x3y5 = Texture[id.xy + uint2(0, 2)];
//	float4 x4y5 = Texture[id.xy + uint2(1, 2)];
//	float4 x5y5 = Texture[id.xy + uint2(2, 2)];
//
//	float4 result = (
//		(x1y1 + x2y1 + x3y1 + x4y1 + x5y1) +
//		(x1y2 + x2y2 + x3y2 + x4y2 + x5y2) +
//		(x1y3 + x2y3 + x3y3 + x4y3 + x5y3) +
//		(x1y4 + x2y4 + x3y4 + x4y4 + x5y4) +
//		(x1y5 + x2y5 + x3y5 + x4y5 + x5y5))
//		/ 25.0f;
//
//	TextureOut[id.xy] = result;// -x3y3;
//}

